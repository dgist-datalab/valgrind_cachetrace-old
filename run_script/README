Use run_script.sh to start memory tracing. It generates virtual trace file with target executable program.
It is a very simple script, so you can modify this script as you want.
You can test the physical trace feature works well by running check.sh

You can modify this script as you want.
Line 58 and 63 is necessary. 
Line 58 runs valgrind to generate virtual memory address trace to the [.vout] file through stderr.
and line 63 sends the pid of target process to the kernel.
Upon receiving the target pid, the kernel outputs the VPN-PFN mapping information of the faulting address to the /proc/vpmap/vpmap.

[How to use]
	./run_script.sh --type [virtual/physical] --input [executable args..]
		NOTE: --input [] must be placed at the end of option
		Run [executable] with generating after-cache virtual address trace.
		virtual type: generate virtual address trace only.
		phyiscal type: generate virtual address trace & V2P mapping, and create physical address trace by mixing them.

	./run_script.sh --type [virtual/physical] --pref --input [executable args..]
		NOTE: --input [] must be placed at the end of option
		Run [executable] with generating after-cache virtual address trace with cpu prefetcher in the valgrind cache simulator. 
		To generate more accurate trace, recommend to use --pref option.
		
	Output:
		[trace_pref{ON/OFF}.vout] file: Virtual address trace 
		[trace_pref{ON/OFF}.vpmap] file: V2P mapping information
		[trace_pref{ON/OFF}.mix] file: mixure of [.vout] and [.vpmap] following timestamps order
		[trace_pref{ON/OFF}.pout] file: Physical address trace
		[proclog.log] file: Redirection of process standard output
		[callgrind.out.#]: Output from vanilla Valgrind (We don't use. It's OK to remove these files)
